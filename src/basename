#!/usr/bin/env python
#
# basename - basename(1) command written in Python
# Copyright (C) 2007, 2008, 2009  David Cantrell <david.l.cantrell@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

ver = (2, 0)

import os
import sys

def usage(cmd):
    sys.stdout.write("Usage: %s NAME [SUFFIX]\n" % (cmd,))
    sys.stdout.write("   or: %s OPTION\n" % (cmd,))
    sys.stdout.write("Print NAME with any leading directory components removed.\n")
    sys.stdout.write("If specified, also remove a trailing SUFFIX.\n\n")
    sys.stdout.write("      --help     display this help and exit\n")
    sys.stdout.write("      --version  output version information and exit\n\n")
    sys.stdout.write("Examples:\n")
    sys.stdout.write("  %s /usr/bin/sort       Output \"sort\".\n" % (cmd,))
    sys.stdout.write("  %s include/stdio.h .h  Output \"stdio\".\n" % (cmd,))

def xbasename(path, suffix=None):
    if path == '':
        return ''
    elif path.rstrip('/') == '':
        s = os.stat("/")
        d = os.stat("//")

        if s.st_dev == d.st_dev and s.st_ino == d.st_ino:
            return '/'
        else:
            return '//'

    base = os.path.basename(path.rstrip('/'))

    if suffix and base != suffix and not suffix.endswith('/'):
        base = base.rstrip(suffix)

    return base

def xexit(prog, msg):
    sys.stderr.write(msg)
    sys.stderr.write("Try `%s --help' for more information.\n" % (prog,))
    sys.exit(1)

def main():
    prog = xbasename(sys.argv[0])

    if len(sys.argv) == 1:
        xexit(prog, "%s: missing operand\n" % (prog,))

    if sys.argv[1] == "--help":
        usage(prog)
        sys.exit(0)
    elif sys.argv[1] == "--version":
        sys.stdout.write("pycoreutils %s version %d.%d\n" % (prog, ver[0], ver[1],))
        sys.exit(0)
    else:
        if len(sys.argv) > 3:
            xexit(prog, "%s: extra operand `%s'\n" % (prog, sys.argv[len(sys.argv) - 1],))
        elif len(sys.argv) == 3:
            sys.stdout.write("%s\n" % (xbasename(sys.argv[1], suffix=sys.argv[2]),))
        else:
            sys.stdout.write("%s\n" % (xbasename(sys.argv[1]),))

        sys.exit(0)

if __name__ == "__main__":
    main()

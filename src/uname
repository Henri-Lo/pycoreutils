#!/usr/bin/env python
#
# uname.py - uname(1) command written in Python
# Copyright (C) 2007, 2008  David Cantrell <david.l.cantrell@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

ver = (2, 0)

import getopt
import os
import posix
import sys

def usage(cmd):
	print "Usage: %s [OPTION]..." % (cmd,)
	print "Print certain system information.  With no OPTION, same as -s.\n"
	print "  -a, --all                print all information, in the following order,"
	print "                             except omit -p and -i if unknown:"
	print "  -s, --kernel-name        print the kernel name"
	print "  -n, --nodename           print the network node hostname"
	print "  -r, --kernel-release     print the kernel release"
	print "  -v, --kernel-version     print the kernel version"
	print "  -m, --machine            print the machine hardware name"
	print "  -p, --processor          print the processor type or \"unknown\""
	print "  -i, --hardware-platform  print the hardware platform or \"unknown\""
	print "  -o, --operating-system   print the operating system"
	print "      --help     display this help and exit"
	print "      --version  output version information and exit"

def xuname():
	ret = {}
	(sysname, nodename, release, version, machine,) = posix.uname()
	processor = machine

	if machine == 'i686':
		try:
			f = open('/proc/cpuinfo', 'r')
			for l in f.readlines():
				if l.startswith('vendor_id'):
					if l.find('AuthenticAMD') != -1:
						processor = 'athlon'
						break
			f.close()
		except:
			pass

	platform = machine
	if platform.startswith('i') and platform.endswith('86'):
		platform = 'i386'

	# FIXME: does not support anything other than Linux right now
	opsys = sysname
	if opsys == 'Linux':
		opsys = 'GNU/Linux'

	ret['sysname'] = sysname
	ret['nodename'] = nodename
	ret['release'] = release
	ret['version'] = version
	ret['machine'] = machine
	ret['processor'] = processor
	ret['platform'] = platform
	ret['opsys'] = opsys

	return ret

def main():
	prog = os.path.basename(sys.argv[0])
	opts, args = [], []
	all, help, version, unknown = False, False, False, False
	s, n, r, v, m, pr, pl, opsys = False, False, False, False, False, False, False, False
	num = 0

	val = xuname()

	if len(sys.argv) == 1:
		print val['sysname']
		sys.exit(0)

	try:
		opts, args = getopt.getopt(sys.argv[1:], 'asnrvmpio',
		                           ['all', 'kernel-name',
		                            'nodename', 'kernel-release',
		                            'kernel-version', 'machine',
		                            'processor', 'hardware-platform',
		                            'operating-system', 'help',
		                            'version'])
	except getopt.GetoptError:
		help = True

	for o, a in opts:
		if o in ('-a', '--all'):
			all = True
		elif o in ('-s', '--kernel-name'):
			s = True
			num += 1
		elif o in ('-n', '--nodename'):
			n = True
			num += 1
		elif o in ('-r', '--kernel-release'):
			r = True
			num += 1
		elif o in ('-v', '--kernel-version'):
			v = True
			num += 1
		elif o in ('-m', '--machine'):
			m = True
			num += 1
		elif o in ('-p', '--processor'):
			pr = True
			num += 1
		elif o in ('-i', '--hardware-platform'):
			pl = True
			num += 1
		elif o in ('-o', '--operating-system'):
			opsys = True
			num += 1
		elif o in ('--help'):
			help = True
		elif o in ('--version'):
			version = True
		else:
			unknown = True

	if help:
		usage(prog)
		sys.exit(0)
	elif version:
		print "pycoreutils %s version %d.%d" % (prog, ver[0], ver[1],)
		sys.exit(0)
	elif unknown:
		sys.stderr.write("%s: extra operand `%s'" % (prog, sys.argv[1],))
		sys.stderr.write("Try `%s --help' for more information." % (prog,))
		sys.exit(1)

	if all:
		print "%s %s %s %s %s %s %s %s" % (val['sysname'], val['nodename'], val['release'], val['version'], val['machine'], val['processor'], val['platform'], val['opsys'],)
		sys.exit(0)

	if s:
		sys.stdout.write(val['sysname'])

	if n:
		sys.stdout.write(val['nodename'])
		if num > 1:
			sys.stdout.write(' ')

	if r:
		sys.stdout.write(val['release'])
		if num > 1:
			sys.stdout.write(' ')

	if v:
		sys.stdout.write(val['version'])
		if num > 1:
			sys.stdout.write(' ')

	if m:
		sys.stdout.write(val['machine'])
		if num > 1:
			sys.stdout.write(' ')

	if pr:
		sys.stdout.write(val['processor'])
		if num > 1:
			sys.stdout.write(' ')

	if pl:
		sys.stdout.write(val['platform'])
		if num > 1:
			sys.stdout.write(' ')

	if opsys:
		sys.stdout.write(val['opsys'])

	sys.stdout.write('\n')

if __name__ == "__main__":
	main()

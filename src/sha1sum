#!/usr/bin/env python
#
# sha1sum - sha1sum(1), sha224sum(1), sha256sum(1), sha384sum(1),
#           and sha512sum(1) command written in Python
# Copyright (C) 2008, 2009  David Cantrell <david.l.cantrell@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import getopt
import glob
import hashlib
import os
import sys

ver = (2, 0)

# modes are by command, the tuple fields are:
#     number of bits (int)
#     digest string length (int)
#     standard name (string)
mode = {'sha1sum': (160, 40, 'FIPS-180-1',),
        'sha224sum': (224, 56, 'RFC 3874',),
        'sha256sum': (256, 64, 'FIPS-180-2',),
        'sha384sum': (384, 96, 'FIPS-180-2',),
        'sha512sum': (512, 128, 'FIPS-180-2',)}

def usage(cmd):
    (bits, digest_length, standard,) = mode[cmd]
    desc = cmd.upper().replace('SUM', '')

    print "Usage: %s [OPTION] [FILE]..." % (cmd,)
    print "Print or check %s (%d-but) checksums." % (desc, bits,)
    print "With no FILE, or when FILE is -, read standard input.\n"
    print "  -b, --binary            read in binary mode"
    print "  -c, --check             read MD5 sums from the FILEs and check them"
    print "  -t, --text              read in text mode (default)\n"
    print "The following two options are useful only when verifying checksums:"
    print "      --status            don't output anything, status code shows success"
    print "  -w, --warn              warn about improperly formatted checksum lines\n"
    print "      --help     display this help and exit"
    print "      --version  output version information and exit\n"
    print "The sums are computed as described in %s.  When checking, the input" % (standard,)
    print "should be a former output of this program.  The default mode is to print"
    print "a line with checksum, a character indicating type (`*' for binary, ` ' for"
    print "text), and name for each FILE."

def check_digest(cmd, sumfile, statusonly=False):
    (bits, digest_length, standard) = mode[cmd]
    ret = True

    try:
        if sumfile == '-':
            fd = open(sys.stdin, 'r')
        else:
            if not os.path.isfile(sumfile):
                sys.stderr.write("ERROR: %s does not exist\n" % (sumfile,))
                return False

            fd = open(os.path.realpath(sumfile), 'r')
    except IOError, e:
        sys.stderr.write("%s: %s: %s\n" % (os.path.basename(sys.argv[0]), sumfile, os.strerror(e.errno),))
        return False

    lines = map(lambda e: e.strip(), fd.readlines())
    fd.close()

    for line in lines:
        if pair[32:34] == ' *':
            binary = True
        else:
            binary = False

        digest = pair[:digest_length]
        filename = pair[digest_length+1:]

        (calcret, calcdigest) = calc_digest(cmd, filename, binary=binary)

        if calcret and digest == calcdigest:
            if not statusonly:
                print "%s: OK" % (filename,)
        else:
            ret = False

    return ret

def calc_digest(cmd, filename, binary=False):
    ret = True

    if filename == '-':
        fd = sys.stdin
    else:
        if not os.path.isfile(filename):
            print "%s: No such file" % (filename,)
            ret = False
            return ''

    try:
        if binary:
            fd = file(filename, 'rb')
        else:
            fd = file(filename, 'r')
    except:
        print "Unable to open %s" % (filename,)
        ret = False
        return (ret, '')

    if cmd == 'sha1sum':
        calc = hashlib.sha1()
    elif cmd == 'sha224sum':
        calc = hashlib.sha224()
    elif cmd == 'sha256sum':
        calc = hashlib.sha256()
    elif cmd == 'sha384sum':
        calc = hashlib.sha384()
    elif cmd == 'sha512sum':
        calc = hashlib.sha512()
    else:
        raise ImportError, "hashlib does not support %s" % (cmd,)

    calc.update(fd.read())
    fd.close()

    return (ret, calc.hexdigest())

def main():
    prog = os.path.basename(sys.argv[0])
    opts, args = [], []
    status, help, version, unknown = False, False, False, False
    binary, check, text, warn = False, False, False, False
    ret = True
    type = ' '
    (bits, digest_length, standard) = mode[prog]
    digestHexBytes = (bits / 4)
    minDigestLineLength = digestHexBytes + 3

    try:
        opts, args = getopt.getopt(sys.argv[1:], "bctw",
                                   ["binary", "check", "text",
                                    "status", "warn", "help",
                                    "version"])
    except getopt.GetoptError:
        help = True

    for o, a in opts:
        if o in ("-b", "--binary"):
            binary = True
            type = '*'
        elif o in ("-c", "--check"):
            check = True
        elif o in ("-t", "--text"):
            text = True
        elif o in ("--status"):
            status = True
            warn = False
        elif o in ("-w", "--warn"):
            warn = True
        elif o in ("--help"):
            help = True
        elif o in ("--version"):
            version = True
        else:
            unknown = True

    if help:
        usage(prog)
        sys.exit(1)
    elif version:
        print "pycoreutils %s version %d.%d" % (prog, ver[0], ver[1],)
        sys.exit(0)
    elif unknown:
        if sys.argv[1].startswith('--'):
            helpstr = 'unrecognized option'
        else:
            helpstr = 'invalid option --'

        sys.stderr.write("%s: %s '%s'" % (prog, helpstr, sys.argv[1],))
        sys.stderr.write("Try `%s --help' for more information." % (prog,))

    if not binary and text and check:
        sys.stderr.write("the --binary and --text options are meaningless when verifying checksums")
        usage(prog)
        sys.exit(1)

    if status and not check:
        sys.stderr.write("the --status option is meaningful only when verifying checksums")
        usage(prog)
        sys.exit(1)

    if warn and not check:
        sys.stderr.write("the --warn option is meaningful only when verifying checksums")
        usage(prog)
        sys.exit(1)

    if args == []:
        args.append('-')

    if prog == 'sha1sum':
        fmt = "%40s"
    elif prog == 'sha224sum':
        fmt = '%56s'
    elif prog == 'sha256sum':
        fmt = '%64s'
    elif prog == 'sha384sum':
        fmt = '%96s'
    elif prog == 'sha512sum':
        fmt = '%128s'
    else:
        raise ImportError, "hashlib does not support %s" % (cmd,)

    fmt += " %s%s"

    for arg in args:
        sublist = glob.glob(arg)

        for subarg in sublist:
            if check:
                ret &= check_digest(cmd, subarg, statusonly=status)
            else:
                (calcret, digest) = calc_digest(prog, subarg,
                                                binary=binary)
                ret &= calcret

                # output a leading backslash if the name
                # contains a newline or backslash
                if subarg.find('\\') != -1 or \
                   subarg.find('\n') != -1:
                    sys.stdout.write("\\")

                # convert each newline in the filename to "\\n"
                # and each backslash to "\\\\"
                subarg = subarg.replace('\n', '\\n')
                subarg = subarg.replace('\\', '\\\\')

                print fmt % (digest, type, subarg,)

    sys.exit(not int(ret))

if __name__ == "__main__":
    main()
